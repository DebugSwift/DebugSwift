name: Release

on:
  push:
    branches: 
      - "main"
      - "develop"
  pull_request:
    branches:
      - "*"

permissions:
   actions: write
   checks: write
   contents: write
   deployments: write
   issues: write
   packages: write
   pull-requests: write
   repository-projects: write
   security-events: write
   statuses: write

jobs:
  git_version:
    name: Determine current version
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
      majorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}
    
    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0

    - name: Display GitVersion
      run: |
        NEW_TAG="${{ steps.gitversion.outputs.semVer }}"
        echo "Semantic Version: $NEW_TAG"
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

  update_podspec:
    name: Update podspec
    needs: git_version
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout
      uses: actions/checkout@v3

    - name: Display version
      run: |
        PODSPEC_VERSION=$(grep -E "s\.version\s*=" DebugSwift.podspec | awk -F\' '{print $2}')
        echo "PODSPEC_VERSION=$PODSPEC_VERSION" >> $GITHUB_ENV
        echo Current version: '${{ needs.git_version.outputs.majorMinorPatch }}'
        echo Podspec version: "$PODSPEC_VERSION"

    - name: Update version
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        VERSION='${{ needs.git_version.outputs.majorMinorPatch }}'

        if [ "$PODSPEC_VERSION" == "$VERSION" ]; then
          echo Podspec version is updated.
        else
          echo Updating Podspec version...
          PODSPEC_FILE="DebugSwift.podspec"
          sed -i -E "s/(s\.version *= *')([^']+)(.*)/\1$VERSION\3/g" "$PODSPEC_FILE"
          
          echo Committing and pushing...
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git checkout "$GITHUB_HEAD_REF"
          git add "$PODSPEC_FILE"
          git commit -m 'feat: Update Podspec version'
          git push
        fi

  latest_release:
    name: Get latest version
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    outputs:
      latestTag: ${{ steps.getTag.outputs.latestTag }}

    steps:

    - name: Get latest release
      uses: octokit/request-action@v2.x
      id: get_release
      with:
        route: GET /repos/:repository/releases/latest
        repository: ${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Display latest release tag
      id: getTag
      run: |
        json='${{ steps.get_release.outputs.data }}'
        tag="$(echo $json | jq -r '.tag_name')"
        echo $tag
        echo "::set-output name=latestTag::$tag"
        
    - name: Display error if exists
      run: "echo Release could not be found. Request failed with status '${{ steps.get_release.outputs.status }}'"
      if: ${{ failure() }}

  tag:
    name: Create tag
    if: ${{ github.event_name == 'push' }}
    needs: 
      - git_version
      - update_podspec
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Push Git Tag
      run: |
        git config user.name "GitHub Actions"
        git config user.email "github-actions@users.noreply.github.com"
        git tag ${{ needs.git_version.outputs.semVer }}
        git push origin ${{ needs.git_version.outputs.semVer }}

  release:
    name: Create release
    if: contains(github.ref, 'refs/heads/main')
    needs: 
      - latest_release
      - tag
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ needs.git_version.outputs.semVer }}
        release_name: Release ${{ needs.git_version.outputs.semVer }}
        body: |
          Full changelog: [${{ needs.latest_release.outputs.latestTag }}...${{ needs.git_version.outputs.semVer }}](https://github.com/${{ github.repository }}/compare/${{ needs.latest_release.outputs.latestTag }}...${{ needs.git_version.outputs.semVer }})
        draft: false
        prerelease: false

  publish_pod:
    name: Publish pod
    needs: 
      - release
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - run: "pod trunk push DebugSwift.podspec"
      env:
        COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
    - run: "pod trunk me clean-sessions --all"
